mport pexpect
import subprocess

# variables for the router
ip_address = '192.168.56.101'
username = 'cisco'
password = 'cisco123!'
password_enable = 'class123!'
host_name = 'Awais'

# Create The telnet session
session = pexpect.spawn('telnet ' + ip_address, encoding='utf-8', timeout=20)
result = session.expect(['Username:', pexpect.TIMEOUT])

# Check for error in creating telnet session if there is one then display the error and exit
if result != 0:
    print('--- Failure creating telnet session for: ', ip_address)
    exit()

# Session is expecting username, enter details
session.sendline(username)
result = session.expect(['Password:', pexpect.TIMEOUT])
# Check for error when entering details if there is one then display the error and exit
if result != 0:
    print('--- Failure entering the username: ', username)
    exit()
# Session is expecting password, enter details
session.sendline(password)
result = session.expect(['#', pexpect.TIMEOUT])
# Check for error when entering details if there is one then display the error and exit
if result != 0:
    print('--- Failure entering the password: ', password)
    exit()

#--------[output running config and save output to local file]---------

# Send the command to output the running configuration
session.sendline('show running-config')
result = session.expect(['#', pexpect.TIMEOUT])


# Save the output to a local file
with open('running-config.txt', 'w') as f:
    f.write(session.before)  # Save the output


#--------[output startup config and save output to local file]---------

# Send the command to output the running configuration
session.sendline('show startup-config')
result = session.expect(['#', pexpect.TIMEOUT])


# Save the output to a local file
with open('startup-config.txt', 'w') as f:
    f.write(session.before)  # Save the output

#---------Comapre the start up config to the running config--------
file_path_1 = "/home/devasc/labs/prne/startup-config.txt"

file_path_2 = "/home/devasc/labs/prne/running-config.txt"

   
command = f"diff {file_path_1} {file_path_2}"
result = subprocess.run(command, shell=True, capture_output=True, text=True)

if result.returncode == 0:
    print("Files are identical.")
else:
    print("Files differ:")
    print(result.stdout)

#---------Enable sys log---------
 #Enable System logs to keep track of all actions
    command = 'echo logging on'
    result = subprocess.run(command, shell=True)

# -------[changing hostname]-------

# Send enable password details
session.sendline(password_enable)
result = session.expect(['#', pexpect.TIMEOUT, pexpect.EOF])
# Check for error when sending enable password details if there is one then display the error and exit
if result != 0:
 print('--- Failure entering enable mode after the sending password ---')
 exit()

# Enter configuration mode
session.sendline('configure terminal')
result = session.expect([r'.\(config\)#', pexpect.TIMEOUT, pexpect.EOF])
# Check for error entering configuration mode if there is one then display the error and exit
if result != 0:
 print('--- Failure entering config mode ---')
 exit()


 # Change the hostname to Awais
session.sendline('hostname Awais')
result = session.expect([r'Awais\(config\)#', pexpect.TIMEOUT, pexpect.EOF])
# Check for error if there is one then display the error and exit
if result != 0:
 print('--- Failure setting the hostname ---')



# Exit config mode
session.sendline('exit')
# Exit enable mode
session.sendline('exit')

# Displaying success message
print('----------------------------------------------------------------------')
print('--- hostname: ', host_name )
print('--- Successefully connected to: ', ip_address)
print('--- Username: ', username)
print('--- Password: ', password)
print('--- success completing A1 Programming for Network Engineers task! ---')
print('---------------------------------------------------------------------')

session.sendline('quit')
session.close()
